{"version":3,"sources":["Card.js","CardList.js","Arama.js","Ekleme.js","Kaydir.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","id","alt","width","username","name","CardList","kediler","map","user","i","key","Aramakutu","arama_alanı","aramaDeg","type","onChange","Eklemekutu","Kaydir","style","overflow","border","height","children","App","aramaDegisikligi","event","setState","target","value","state","fetch","then","response","json","users","arananKediler","this","filter","toLowerCase","includes","Arama","Ekleme","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8RAmBeA,G,YAfF,SAACC,GAET,OACC,yBAAKC,UAAU,6DACf,yBAAKC,IAAG,+BAA2BF,EAAMG,GAAjC,iBAAoDC,IAAI,OAAOC,MAAO,UAC5E,6BACG,yCAAUL,EAAMM,UAChB,qCAAWN,EAAMO,UCgBXC,EAbA,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACnB,OACA,6BAEMA,EAAQC,KAAI,SAACC,EAAKC,GAChB,OACE,kBAAC,EAAD,CAAMC,IAAKD,EAAGT,GAAIM,EAAQG,GAAGT,GAAIG,SAAUG,EAAQG,GAAGN,SAAUC,KAAME,EAAQG,GAAGL,YCV5EO,G,MARG,SAAC,GAA4B,EAA3BC,iBAA4B,IAAfC,EAAc,EAAdA,SAC/B,OACQ,yBAAKf,UAAU,KAAf,mFACC,2BAAOgB,KAAK,SAAShB,UAAU,8BAA8BiB,SAAUF,OCSnEG,EAXI,WACjB,OACQ,oCACC,4BAAQlB,UAAU,mDAAlB,uBADD,oFCOOmB,EAVF,SAACpB,GAChB,OAEA,yBAAKqB,MAAO,CAACC,SAAU,SAAUC,OAAQ,mBAAqBC,OAAO,UACpExB,EAAMyB,WCsCQC,E,YAlCb,aAAc,IAAD,8BACX,+CAGAC,iBAAmB,SAACC,GACnB,EAAKC,SAAS,CAACd,mBAAaa,EAAME,OAAOC,SAH1C,EAAKC,MAAQ,CAACvB,QAAS,GAAIM,mBAAY,IAF5B,E,iFAQU,IAAD,OAClBkB,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAU,EAAKR,SAAS,CAACpB,QAAQ4B,S,+BAGlC,IAAD,OACFC,EAAgBC,KAAKP,MAAMvB,QAAQ+B,QAAO,SAAA/B,GAC5C,OAAOA,EAAQH,SAASmC,cAAcC,SAAS,EAAKV,MAAMjB,iBAAY0B,kBAE1E,OACE,yBAAKxC,UAAU,wBACf,4BAAQA,UAAU,cAAlB,aAGA,kBAAC0C,EAAD,CAAW3B,SAAWuB,KAAKZ,mBAC3B,kBAACiB,EAAD,MACA,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUnC,QAAS6B,U,GA3BTO,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACT,6BAEE,kBAAC,EAAD,OAIAC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,MAAK,SAAAwB,GACjCA,EAAaC,kB","file":"static/js/main.7b764cff.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.css';\r\n\r\n\r\nconst Card = (props) => {\r\n\r\n     return (\r\n      <div className=\"bg-light-pink dib br3 pa3 ma2 grow-large shadow-5 bw3  tc\">\r\n      <img src= {`https://robohash.org/${props.id}.png?set=set4`} alt=\"kedi\" width= \"140px\"  />\r\n        <div>\r\n           <h3>Adı: {props.username}</h3>\r\n           <p>Cinsi: {props.name}</p>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n    \r\n \r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card.js';\r\n// import  {kediler} from './Kediler.js';\r\n\r\n// class CardList extends React.Component {\r\n//   render() {\r\n//     let tumKediler = [];\r\n//     for (let i=0; i < kediler.length; i++) {\r\n//       tumKediler.push(<Card key={i} id={kediler[i].id} name={kediler[i].name} tip={kediler[i].tip} />)\r\n//     }\r\n//     return <h1>{tumKediler}</h1>;\r\n//   }\r\n// }\r\n\r\nconst CardList = ({kediler}) => {\r\nreturn(\r\n<div>\r\n    {\r\n      kediler.map((user,i) => {\r\n        return (\r\n          <Card key={i} id={kediler[i].id} username={kediler[i].username} name={kediler[i].name} />\r\n                );\r\n      })}\r\n</div>\r\n  );\r\n}\r\n\r\n  export default CardList;","import React from 'react';\r\n\r\nconst Aramakutu = ({arama_alanı, aramaDeg}) => {\r\n  return (\r\n          <div className=\"b\">Çağırmak istediğin kedinin adını buraya yazabilirsin   \r\n           <input type=\"search\" className=\"pa2 ba bg-lightest-blue br4\" onChange={aramaDeg}/>\r\n           </div>\r\n    );\r\n}\r\n\r\nexport default Aramakutu;     \r\n\r\n\r\n","import React from 'react';\r\n\r\n\r\nconst Eklemekutu = () => {\r\n  return (\r\n          <div>veya\r\n           <button className=\"f6 link dim ph3 pv2 mb2 dib white bg-purple br4\">Kedi Ekleyebilirsin</button>\r\n           \"Kedi Ekleme\" henüz çalışmıyor, servera erişim yok :)\r\n           </div>\r\n\r\n    );\r\n}\r\n\r\n\r\nexport default Eklemekutu;     ","import React from 'react';\r\n\r\nconst Kaydir = (props) => {\r\nreturn(\r\n \r\n<div style={{overflow: \"scroll\", border: \"2px solid purple\" , height:\"800px\"}}>\r\n{props.children}\r\n\r\n</div>\r\n  );\r\n}\r\n\r\n  export default Kaydir;","import React, {Component} from 'react';\nimport './App.css';\nimport CardList from './CardList.js';\nimport \"tachyons\";\nimport Aramakutu from './Arama.js';\nimport Eklemekutu from './Ekleme.js';\n// import  {kediler} from './Kediler.js';\nimport Kaydir from './Kaydir.js';\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state = {kediler: [], arama_alanı:\"\"}\n  }\n    aramaDegisikligi = (event) => {\n     this.setState({arama_alanı: event.target.value})\n    }\n\n    componentDidMount() {\n      fetch(\"https://jsonplaceholder.typicode.com/users\")\n        .then(response => response.json())\n        .then(users => {this.setState({kediler:users})});\n    }\n\n  render () {\n    const arananKediler = this.state.kediler.filter(kediler => {\n        return kediler.username.toLowerCase().includes(this.state.arama_alanı.toLowerCase());\n    } ) \n    return (\n      <div className=\"App flex flex-column\" >\n      <header className=\"App-header\">\n        KEDiLERiM\n      </header>\n      <Aramakutu aramaDeg ={this.aramaDegisikligi} />\n      <Eklemekutu />\n      <Kaydir>\n        <CardList kediler={arananKediler} />\n      </Kaydir>\n    </div>);\n  }\n    \n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.js';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n<div >\n\n\t\t<App />\n\n</div>\n\n\t,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n\n\n// import Hello from './Hello.js';\n// let isim = \"Kutlu\";\n// var d = new Date();\n// var n = d.getHours();\n// if (n<17) {\n// \tvar dilim = \"gün\"\n// } else {\n// \tdilim = \"akşam\"\n// }\n\n// ReactDOM.render(<Hello selamlama={isim+\"; bu \"+dilim+\" nasılsın?\"}/>, document.getElementById('root'));\n"],"sourceRoot":""}